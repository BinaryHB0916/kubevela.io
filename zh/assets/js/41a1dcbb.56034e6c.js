(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[8864],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,v=m["".concat(p,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(v,l(l({ref:t},c),{},{components:n})):o.createElement(v,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},30145:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p},default:function(){return c}});var o=n(22122),r=n(19756),a=(n(67294),n(3905)),l={title:"Progressive Rollout"},i={unversionedId:"rollout/rollout",id:"version-v1.0/rollout/rollout",isDocsHomePage:!1,title:"Progressive Rollout",description:'Rollout or Upgrade is one of the most essential "day 2" operation on any application',source:"@site/versioned_docs/version-v1.0/rollout/rollout.md",sourceDirName:"rollout",slug:"/rollout/rollout",permalink:"/zh/docs/rollout/rollout",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/zh/rollout/rollout.md",version:"v1.0",lastUpdatedBy:"yangsoon",lastUpdatedAt:1621315429,formattedLastUpdatedAt:"5/18/2021",frontMatter:{title:"Progressive Rollout"},sidebar:"version-v1.0/docs",previous:{title:"Deploy Application",permalink:"/zh/docs/application"},next:{title:"Multi-Cluster Deployment",permalink:"/zh/docs/rollout/appdeploy"}},p=[{value:"Overview",id:"overview",children:[{value:"Design Principles and Goals",id:"design-principles-and-goals",children:[]}]},{value:"AppRollout",id:"approllout",children:[]},{value:"User Workflow",id:"user-workflow",children:[{value:"Revert",id:"revert",children:[]},{value:"Skip revision rollout",id:"skip-revision-rollout",children:[]}]},{value:"State Transition",id:"state-transition",children:[]},{value:"Roadmap",id:"roadmap",children:[]}],s={toc:p};function c(e){var t=e.components,l=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Rollout")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Upgrade"),' is one of the most essential "day 2" operation on any application\n. KubeVela, as an application centric platform, definitely needs to provide a customized solution\nto alleviate the burden on the application operators.'),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"There are several attempts at solving this problem in the cloud native community. However, none\nof them provide a true rolling style upgrade. For example, flagger supports Blue/Green, Canary\nand A/B testing. Therefore, we decide to add support for batch based rolling upgrade as\nour first style to support in KubeVela."),(0,a.kt)("h3",{id:"design-principles-and-goals"},"Design Principles and Goals"),(0,a.kt)("p",null,"We design KubeVela rollout solutions with the following principles in mind"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First, we want all flavors of rollout controllers share the same core rollout\nrelated logic. The trait and application related logic can be easily encapsulated into its own\npackage."),(0,a.kt)("li",{parentName:"ul"},"Second, the core rollout related logic is easily extensible to support different type of\nworkloads, i.e. Deployment, CloneSet, Statefulset, DaemonSet or even customized workloads."),(0,a.kt)("li",{parentName:"ul"},"Thirdly, the core rollout related logic has a well documented state machine that\ndoes state transition explicitly."),(0,a.kt)("li",{parentName:"ul"},"Finally, the controllers can support all the rollout/upgrade needs of an application running\nin a production environment including Blue/Green, Canary and A/B testing.")),(0,a.kt)("h2",{id:"approllout"},"AppRollout"),(0,a.kt)("p",null,"Here is a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"AppRollout")," that upgrade an application from v1 to v2 in three batches. The\nfirst batch contains only 1 pod while the rest of the batches split the rest."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: AppRollout\nmetadata:\n  name: rolling-example\nspec:\n  sourceAppRevisionName: test-rolling-v1\n  targetAppRevisionName: test-rolling-v2\n  componentList:\n    - metrics-provider\n  rolloutPlan:\n    rolloutStrategy: "IncreaseFirst"\n    rolloutBatches:\n      - replicas: 1\n      - replicas: 50%\n      - replicas: 50%\n    batchPartition: 1\n')),(0,a.kt)("h2",{id:"user-workflow"},"User Workflow"),(0,a.kt)("p",null,"Here is the end to end user experience based on Deployment"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Deploy application to the cluster",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: test-rolling\n  annotations:\n    "app.oam.dev/rolling-components": "metrics-provider"\n    "app.oam.dev/rollout-template": "true"\nspec:\n  components:\n    - name: metrics-provider\n      type: worker\n      properties:\n        cmd:\n          - ./podinfo\n          - stress-cpu=1\n        image: stefanprodan/podinfo:4.0.6\n        port: 8080\n        replicas: 5\n')),"Verify AppRevision ",(0,a.kt)("inlineCode",{parentName:"li"},"test-rolling-v1")," have generated")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get apprev test-rolling-v1\nNAME              AGE\ntest-rolling-v1   9s\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Attach the following rollout plan to upgrade the application to v1"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: AppRollout\nmetadata:\n  name: rolling-example\nspec:\n  # application (revision) reference\n  targetAppRevisionName: test-rolling-v1\n  componentList:\n    - metrics-provider\n  rolloutPlan:\n    rolloutStrategy: "IncreaseFirst"\n    rolloutBatches:\n      - replicas: 10%\n      - replicas: 40%\n      - replicas: 50%\n    targetSize: 5\n')),(0,a.kt)("p",{parentName:"li"},"Use can check the status of the ApplicationRollout and wait for the rollout to complete.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"User can continue to modify the application image tag and apply.This will generate new AppRevision ",(0,a.kt)("inlineCode",{parentName:"p"},"test-rolling-v2")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: test-rolling\n  annotations:\n    "app.oam.dev/rolling-components": "metrics-provider"\n    "app.oam.dev/rollout-template": "true"\nspec:\n  components:\n    - name: metrics-provider\n      type: worker\n      properties:\n        cmd:\n          - ./podinfo\n          - stress-cpu=1\n        image: stefanprodan/podinfo:5.0.2\n        port: 8080\n        replicas: 5\n')))),(0,a.kt)("p",null,"Verify AppRevision ",(0,a.kt)("inlineCode",{parentName:"p"},"test-rolling-v2")," have generated"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get apprev test-rolling-v2\nNAME              AGE\ntest-rolling-v2   7s\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Apply the application rollout that upgrade the application from v1 to v2",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: AppRollout\nmetadata:\n  name: rolling-example\nspec:\n  # application (revision) reference\n  sourceAppRevisionName: test-rolling-v1\n  targetAppRevisionName: test-rolling-v2\n  componentList:\n    - metrics-provider\n  rolloutPlan:\n    rolloutStrategy: "IncreaseFirst"\n    rolloutBatches:\n      - replicas: 1\n      - replicas: 2\n      - replicas: 2\n')),'User can check the status of the ApplicationRollout and see the rollout completes, and the\nApplicationRollout\'s "Rolling State" becomes ',(0,a.kt)("inlineCode",{parentName:"li"},"rolloutSucceed"))),(0,a.kt)("h3",{id:"revert"},"Revert"),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Apply the application rollout that revert the application from v2 to v1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\n  kind: AppRollout\n  metadata:\n    name: rolling-example\n  spec:\n    # application (revision) reference\n    sourceAppRevisionName: test-rolling-v2\n    targetAppRevisionName: test-rolling-v1\n    componentList:\n      - metrics-provider\n    rolloutPlan:\n      rolloutStrategy: "IncreaseFirst"\n      rolloutBatches:\n        - replicas: 1\n        - replicas: 2\n        - replicas: 2\n')),(0,a.kt)("h3",{id:"skip-revision-rollout"},"Skip revision rollout"),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"User can apply this yaml continue to modify the application image tag.This will generate new AppRevision ",(0,a.kt)("inlineCode",{parentName:"li"},"test-rolling-v3"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  apiVersion: core.oam.dev/v1beta1\n  kind: Application\n  metadata:\n    name: test-rolling\n    annotations:\n      "app.oam.dev/rolling-components": "metrics-provider"\n      "app.oam.dev/rollout-template": "true"\n  spec:\n    components:\n      - name: metrics-provider\n        type: worker\n        properties:\n          cmd:\n            - ./podinfo\n            - stress-cpu=1\n          image: stefanprodan/podinfo:5.2.0\n          port: 8080\n          replicas: 5\n')),(0,a.kt)("p",null,"Verify AppRevision ",(0,a.kt)("inlineCode",{parentName:"p"},"test-rolling-v3")," have generated"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get apprev test-rolling-v3\nNAME              AGE\ntest-rolling-v3   7s\n")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"Apply the application rollout that rollout the application from v1 to v3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\n  kind: AppRollout\n  metadata:\n    name: rolling-example\n  spec:\n    # application (revision) reference\n    sourceAppRevisionName: test-rolling-v1\n    targetAppRevisionName: test-rolling-v3\n    componentList:\n      - metrics-provider\n    rolloutPlan:\n      rolloutStrategy: "IncreaseFirst"\n      rolloutBatches:\n        - replicas: 1\n        - replicas: 2\n        - replicas: 2\n')),(0,a.kt)("h2",{id:"state-transition"},"State Transition"),(0,a.kt)("p",null,"Here is the high level state transition graph"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8043).Z})),(0,a.kt)("h2",{id:"roadmap"},"Roadmap"),(0,a.kt)("p",null,"Our recent roadmap for progressive rollout is ",(0,a.kt)("a",{parentName:"p",href:"./roadmap"},"here"),"."))}c.isMDXComponent=!0},8043:function(e,t,n){"use strict";t.Z=n.p+"assets/images/approllout-status-transition-78db00cbc539d19e6c5d3feeead31b16.jpg"}}]);