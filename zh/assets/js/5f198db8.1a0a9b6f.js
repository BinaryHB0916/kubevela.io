(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[8141],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=m(n),d=r,y=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return n?a.createElement(y,i(i({ref:t},u),{},{components:n})):a.createElement(y,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},50768:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var a=n(22122),r=n(19756),o=(n(67294),n(3905)),i={title:"Attach Volumes"},l={unversionedId:"end-user/volumes",id:"version-v1.0/end-user/volumes",isDocsHomePage:!1,title:"Attach Volumes",description:"We will introduce how to attach basic volumes as well as extended custom",source:"@site/versioned_docs/version-v1.0/end-user/volumes.md",sourceDirName:"end-user",slug:"/end-user/volumes",permalink:"/zh/docs/end-user/volumes",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/zh/end-user/volumes.md",version:"v1.0",lastUpdatedBy:"yangsoon",lastUpdatedAt:1621315429,formattedLastUpdatedAt:"5/18/2021",frontMatter:{title:"Attach Volumes"},sidebar:"defaultSidebar",previous:{title:"Provision and Consume Cloud Resources by Terraform",permalink:"/zh/docs/end-user/terraform"},next:{title:"How-to",permalink:"/zh/docs/helm/component"}},s=[{value:"Attach Basic Volume",id:"attach-basic-volume",children:[]},{value:"Extend custom volume types and attach",id:"extend-custom-volume-types-and-attach",children:[]}],m={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We will introduce how to attach basic volumes as well as extended custom\nvolume types for applications."),(0,o.kt)("h2",{id:"attach-basic-volume"},"Attach Basic Volume"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"worker")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"webservice")," both are capable of attaching multiple common types of\nvolumes, including ",(0,o.kt)("inlineCode",{parentName:"p"},"persistenVolumeClaim"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"configMap"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"secret"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"emptyDir"),".\nYou should indicate the name of volume type in components properties.\n(we use ",(0,o.kt)("inlineCode",{parentName:"p"},"pvc")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"persistenVolumeClaim")," for brevity)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend\n      type: webservice\n      properties:\n        image: nginx\n        volumes:\n          - name: "my-pvc"    \n            mountPath: "/var/www/html1" \n            type: "pvc"     # persistenVolumeClaim type volume\n            claimName: "myclaim"\n          - name: "my-cm"    \n            mountPath: "/var/www/html2"\n            type: "configMap"    # configMap type volume (specifying items)\n            cmName: "myCmName"\n            items:\n              - key: "k1"\n                path: "./a1"\n              - key: "k2"\n                path: "./a2"\n          - name: "my-cm-noitems"\n            mountPath: "/var/www/html22"\n            type: "configMap"    # configMap type volume (not specifying items)\n            cmName: "myCmName2"\n          - name: "mysecret"\n            type: "secret"     # secret type volume\n            mountPath: "/var/www/html3"\n            secretName: "mysecret"\n          - name: "my-empty-dir"\n            type: "emptyDir"    # emptyDir type volume\n            mountPath: "/var/www/html4"\n')),(0,o.kt)("p",null,"You should make sure the attached volume sources are prepared in your cluster."),(0,o.kt)("h2",{id:"extend-custom-volume-types-and-attach"},"Extend custom volume types and attach"),(0,o.kt)("p",null,"It's also allowed to extend custom volume types, such as AWS ElasticBlockStore,\nAzure disk, Alibaba Cloud OSS, etc.\nTo enable attaching extended volume types, we should install specific Trait\ncapability first."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f https://raw.githubusercontent.com/oam-dev/kubevela/master/docs/examples/app-with-volumes/td-awsEBS.yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl vela show aws-ebs-volume\n+-----------+----------------------------------------------------------------+--------+----------+---------+\n|   NAME    |                          DESCRIPTION                           |  TYPE  | REQUIRED | DEFAULT |\n+-----------+----------------------------------------------------------------+--------+----------+---------+\n| name      | The name of volume.                                            | string | true     |         |\n| mountPath |                                                                | string | true     |         |\n| volumeID  | Unique id of the persistent disk resource.                     | string | true     |         |\n| fsType    | Filesystem type to mount.                                      | string | true     | ext4    |\n| partition | Partition on the disk to mount.                                | int    | false    |         |\n| readOnly  | ReadOnly here will force the ReadOnly setting in VolumeMounts. | bool   | true     | false   |\n+-----------+----------------------------------------------------------------+--------+----------+---------+\n")),(0,o.kt)("p",null,"Then we can define an Application using aws-ebs volumes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: app-worker\nspec:\n  components:\n    - name: myworker\n      type: worker\n      properties:\n        image: "busybox"\n        cmd:\n          - sleep\n          - "1000"\n      traits:\n        - type: aws-ebs-volume\n          properties:\n            name: "my-ebs"\n            mountPath: "/myebs"\n            volumeID: "my-ebs-id"\n')))}u.isMDXComponent=!0}}]);