(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{135:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var a=t(3),o=t(7),r=(t(0),t(307)),i={title:"Debug, Test and Dry-run"},p={unversionedId:"platform-engineers/debug-test-cue",id:"version-v1.0/platform-engineers/debug-test-cue",isDocsHomePage:!1,title:"Debug, Test and Dry-run",description:"With flexibility in defining abstractions, it's important to be able to debug, test and dry-run the CUE based definitions. This tutorial will show this step by step.",source:"@site/versioned_docs/version-v1.0/platform-engineers/debug-test-cue.md",slug:"/platform-engineers/debug-test-cue",permalink:"/zh/docs/v1.0/platform-engineers/debug-test-cue",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/zh/platform-engineers/debug-test-cue.md",version:"v1.0",lastUpdatedBy:"kubevela-bot",lastUpdatedAt:1618390410,formattedLastUpdatedAt:"4/14/2021",sidebar:"version-v1.0/docs",previous:{title:"Advanced Features",permalink:"/zh/docs/v1.0/cue/advanced"},next:{title:"Defining KEDA as Autoscaling Trait",permalink:"/zh/docs/v1.0/platform-engineers/keda"}},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Define Definition and Template",id:"define-definition-and-template",children:[]},{value:"Debug CUE template",id:"debug-cue-template",children:[{value:"Use <code>cue vet</code> to Validate",id:"use-cue-vet-to-validate",children:[]},{value:"Test CUE Template with <code>Kube</code> package",id:"test-cue-template-with-kube-package",children:[]}]},{value:"Dry-Run the <code>Application</code>",id:"dry-run-the-application",children:[]},{value:"Live-Diff the <code>Application</code>",id:"live-diff-the-application",children:[]}],s={toc:c};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"With flexibility in defining abstractions, it's important to be able to debug, test and dry-run the CUE based definitions. This tutorial will show this step by step."),Object(r.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(r.b)("p",null,"Please make sure below CLIs are present in your environment:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://cuelang.org/docs/install/"},Object(r.b)("inlineCode",{parentName:"a"},"cue")," >=v0.2.2")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"../install#4-optional-get-kubevela-cli"},Object(r.b)("inlineCode",{parentName:"a"},"vela")," (>v1.0.0)"))),Object(r.b)("h2",{id:"define-definition-and-template"},"Define Definition and Template"),Object(r.b)("p",null,"We recommend to define the ",Object(r.b)("inlineCode",{parentName:"p"},"Definition Object")," in two separate parts: the CRD part and the CUE template. This enable us to debug, test and dry-run the CUE template."),Object(r.b)("p",null,"Let's name the CRD part as ",Object(r.b)("inlineCode",{parentName:"p"},"def.yaml"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: ComponentDefinition\nmetadata:\n  name: microservice\n  annotations:\n    definition.oam.dev/description: "Describes a microservice combo Deployment with Service."\nspec:\n  workload:\n    definition:\n      apiVersion: apps/v1\n      kind: Deployment\n  schematic:\n    cue:\n      template: |\n')),Object(r.b)("p",null,"And the CUE template part as ",Object(r.b)("inlineCode",{parentName:"p"},"def.cue"),", then we can use CUE commands such as ",Object(r.b)("inlineCode",{parentName:"p"},"cue fmt")," / ",Object(r.b)("inlineCode",{parentName:"p"},"cue vet"),"  to format and validate the CUE file."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'output: {\n    // Deployment\n    apiVersion: "apps/v1"\n    kind:       "Deployment"\n    metadata: {\n        name:      context.name\n        namespace: "default"\n    }\n    spec: {\n        selector: matchLabels: {\n            "app": context.name\n        }\n        template: {\n            metadata: {\n                labels: {\n                    "app":     context.name\n                    "version": parameter.version\n                }\n            }\n            spec: {\n                serviceAccountName:            "default"\n                terminationGracePeriodSeconds: parameter.podShutdownGraceSeconds\n                containers: [{\n                    name:  context.name\n                    image: parameter.image\n                    ports: [{\n                        if parameter.containerPort != _|_ {\n                            containerPort: parameter.containerPort\n                        }\n                        if parameter.containerPort == _|_ {\n                            containerPort: parameter.servicePort\n                        }\n                    }]\n                    if parameter.env != _|_ {\n                        env: [\n                            for k, v in parameter.env {\n                                name:  k\n                                value: v\n                            },\n                        ]\n                    }\n                    resources: {\n                        requests: {\n                            if parameter.cpu != _|_ {\n                                cpu: parameter.cpu\n                            }\n                            if parameter.memory != _|_ {\n                                memory: parameter.memory\n                            }\n                        }\n                    }\n                }]\n            }\n        }\n    }\n}\n// Service\noutputs: service: {\n    apiVersion: "v1"\n    kind:       "Service"\n    metadata: {\n        name: context.name\n        labels: {\n            "app": context.name\n        }\n    }\n    spec: {\n        type: "ClusterIP"\n        selector: {\n            "app": context.name\n        }\n        ports: [{\n            port: parameter.servicePort\n            if parameter.containerPort != _|_ {\n                targetPort: parameter.containerPort\n            }\n            if parameter.containerPort == _|_ {\n                targetPort: parameter.servicePort\n            }\n        }]\n    }\n}\nparameter: {\n    version:        *"v1" | string\n    image:          string\n    servicePort:    int\n    containerPort?: int\n    // +usage=Optional duration in seconds the pod needs to terminate gracefully\n    podShutdownGraceSeconds: *30 | int\n    env: [string]: string\n    cpu?:    string\n    memory?: string\n}\n')),Object(r.b)("p",null,"After everything is done, there's a script ",Object(r.b)("a",{parentName:"p",href:"https://github.com/oam-dev/kubevela/blob/master/hack/vela-templates/mergedef.sh"},Object(r.b)("inlineCode",{parentName:"a"},"hack/vela-templates/mergedef.sh"))," to merge the ",Object(r.b)("inlineCode",{parentName:"p"},"def.yaml")," and ",Object(r.b)("inlineCode",{parentName:"p"},"def.cue")," into a completed Definition Object."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ ./hack/vela-templates/mergedef.sh def.yaml def.cue > microservice-def.yaml\n")),Object(r.b)("h2",{id:"debug-cue-template"},"Debug CUE template"),Object(r.b)("h3",{id:"use-cue-vet-to-validate"},"Use ",Object(r.b)("inlineCode",{parentName:"h3"},"cue vet")," to Validate"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},'$ cue vet def.cue\noutput.metadata.name: reference "context" not found:\n    ./def.cue:6:14\noutput.spec.selector.matchLabels.app: reference "context" not found:\n    ./def.cue:11:11\noutput.spec.template.metadata.labels.app: reference "context" not found:\n    ./def.cue:16:17\noutput.spec.template.spec.containers.name: reference "context" not found:\n    ./def.cue:24:13\noutputs.service.metadata.name: reference "context" not found:\n    ./def.cue:62:9\noutputs.service.metadata.labels.app: reference "context" not found:\n    ./def.cue:64:11\noutputs.service.spec.selector.app: reference "context" not found:\n    ./def.cue:70:11\n')),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},'reference "context" not found')," is a common error in this step as ",Object(r.b)("a",{parentName:"p",href:"/docs/cue/component?id=cue-context"},Object(r.b)("inlineCode",{parentName:"a"},"context"))," is a runtime information that only exist in KubeVela controllers. In order to validate the CUE template end-to-end, we can add a mock ",Object(r.b)("inlineCode",{parentName:"p"},"context")," in ",Object(r.b)("inlineCode",{parentName:"p"},"def.cue"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Note that you need to remove all mock data when you finished the validation.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-CUE"},"... // existing template data\ncontext: {\n    name: string\n}\n")),Object(r.b)("p",null,"Then execute the command:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ cue vet def.cue\nsome instances are incomplete; use the -c flag to show errors or suppress this message\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},'reference "context" not found')," error is gone, but  ",Object(r.b)("inlineCode",{parentName:"p"},"cue vet")," only validates the data type which is not enough to ensure the login in template is correct. Hence we need to use ",Object(r.b)("inlineCode",{parentName:"p"},"cue vet -c")," for complete validation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ cue vet def.cue -c\ncontext.name: incomplete value string\noutput.metadata.name: incomplete value string\noutput.spec.selector.matchLabels.app: incomplete value string\noutput.spec.template.metadata.labels.app: incomplete value string\noutput.spec.template.spec.containers.0.image: incomplete value string\noutput.spec.template.spec.containers.0.name: incomplete value string\noutput.spec.template.spec.containers.0.ports.0.containerPort: incomplete value int\noutputs.service.metadata.labels.app: incomplete value string\noutputs.service.metadata.name: incomplete value string\noutputs.service.spec.ports.0.port: incomplete value int\noutputs.service.spec.ports.0.targetPort: incomplete value int\noutputs.service.spec.selector.app: incomplete value string\nparameter.image: incomplete value string\nparameter.servicePort: incomplete value int\n")),Object(r.b)("p",null,"It now complains some runtime data is incomplete (because ",Object(r.b)("inlineCode",{parentName:"p"},"context")," and ",Object(r.b)("inlineCode",{parentName:"p"},"parameter")," do not have value), let's now fill in more mock data in the ",Object(r.b)("inlineCode",{parentName:"p"},"def.cue")," file:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-CUE"},'context: {\n    name: "test-app"\n}\nparameter: {\n    version:       "v2"\n    image:         "image-address"\n    servicePort:   80\n    containerPort: 8000\n    env: {"PORT": "8000"}\n    cpu:    "500m"\n    memory: "128Mi"\n}\n')),Object(r.b)("p",null,"It won't complain now which means validation is passed:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"cue vet def.cue -c\n")),Object(r.b)("h4",{id:"use-cue-export-to-check-the-rendered-resources"},"Use ",Object(r.b)("inlineCode",{parentName:"h4"},"cue export")," to Check the Rendered Resources"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"cue export")," can export rendered result in YAMl foramt:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ cue export -e output def.cue --out yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-app\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: test-app\n  template:\n    metadata:\n      labels:\n        app: test-app\n        version: v2\n    spec:\n      serviceAccountName: default\n      terminationGracePeriodSeconds: 30\n      containers:\n        - name: test-app\n          image: image-address\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ cue export -e outputs.service def.cue --out yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: test-app\n  labels:\n    app: test-app\nspec:\n  selector:\n    app: test-app\n  type: ClusterIP\n")),Object(r.b)("h3",{id:"test-cue-template-with-kube-package"},"Test CUE Template with ",Object(r.b)("inlineCode",{parentName:"h3"},"Kube")," package"),Object(r.b)("p",null,"KubeVela automatically generates internal CUE packages for all built-in Kubernetes API resources including CRDs.\nYou can import them in CUE template to simplify your templates and help you do the validation."),Object(r.b)("p",null,"There are two kinds of ways to import internal ",Object(r.b)("inlineCode",{parentName:"p"},"kube")," packages."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Import them with fixed style: ",Object(r.b)("inlineCode",{parentName:"li"},"kube/<apiVersion>")," and using it by ",Object(r.b)("inlineCode",{parentName:"li"},"Kind"),".",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cue"},'import (\n apps "kube/apps/v1"\n corev1 "kube/v1"\n)\n// output is validated by Deployment.\noutput: apps.#Deployment\noutputs: service: corev1.#Service\n')),"This way is very easy to remember and use because it aligns with the K8s Object usage, only need to add a prefix ",Object(r.b)("inlineCode",{parentName:"li"},"kube/")," before ",Object(r.b)("inlineCode",{parentName:"li"},"apiVersion"),".\nWhile this way only supported in KubeVela, so you can only debug and test it with ",Object(r.b)("a",{parentName:"li",href:"#dry-run-the-application"},Object(r.b)("inlineCode",{parentName:"a"},"vela system dry-run")),"."),Object(r.b)("li",{parentName:"ol"},"Import them with third-party packages style. You can run ",Object(r.b)("inlineCode",{parentName:"li"},"vela system cue-packages")," to list all build-in ",Object(r.b)("inlineCode",{parentName:"li"},"kube")," packages\nto know the ",Object(r.b)("inlineCode",{parentName:"li"},"third-party packages")," supported currently.",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ vela system cue-packages\nDEFINITION-NAME                 IMPORT-PATH                              USAGE\n#Deployment                     k8s.io/apps/v1                          Kube Object for apps/v1.Deployment\n#Service                        k8s.io/core/v1                          Kube Object for v1.Service\n#Secret                         k8s.io/core/v1                          Kube Object for v1.Secret\n#Node                           k8s.io/core/v1                          Kube Object for v1.Node\n#PersistentVolume               k8s.io/core/v1                          Kube Object for v1.PersistentVolume\n#Endpoints                      k8s.io/core/v1                          Kube Object for v1.Endpoints\n#Pod                            k8s.io/core/v1                          Kube Object for v1.Pod\n")),"In fact, they are all built-in packages, but you can import them with the ",Object(r.b)("inlineCode",{parentName:"li"},"import-path")," like the ",Object(r.b)("inlineCode",{parentName:"li"},"third-party packages"),".\nIn this way, you could debug with ",Object(r.b)("inlineCode",{parentName:"li"},"cue")," cli client.")),Object(r.b)("h4",{id:"a-workflow-to-debug-with-kube-packages"},"A workflow to debug with ",Object(r.b)("inlineCode",{parentName:"h4"},"kube")," packages"),Object(r.b)("p",null,"Here's a workflow that you can debug and test the CUE template with ",Object(r.b)("inlineCode",{parentName:"p"},"cue")," CLI and use ",Object(r.b)("strong",{parentName:"p"},"exactly the same CUE template")," in KubeVela."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Create a test directory, Init CUE modules.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"mkdir cue-debug && cd cue-debug/\ncue mod init oam.dev\ngo mod init oam.dev\ntouch def.cue\n")),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Download the ",Object(r.b)("inlineCode",{parentName:"li"},"third-party packages")," by using ",Object(r.b)("inlineCode",{parentName:"li"},"cue")," CLI.")),Object(r.b)("p",null,"In KubeVela, we don't need to download these packages as they're automatically generated from K8s API.\nBut for local test, we need to use ",Object(r.b)("inlineCode",{parentName:"p"},"cue get go")," to fetch Go packages and convert them to CUE format files."),Object(r.b)("p",null,"So, by using K8s ",Object(r.b)("inlineCode",{parentName:"p"},"Deployment")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Serivice"),", we need download and convert to CUE definitions for the ",Object(r.b)("inlineCode",{parentName:"p"},"core")," and ",Object(r.b)("inlineCode",{parentName:"p"},"apps")," Kubernetes modules like below:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"cue get go k8s.io/api/core/v1\ncue get go k8s.io/api/apps/v1\n")),Object(r.b)("p",null,"After that, the module directory will show the following contents:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"\u251c\u2500\u2500 cue.mod\n\u2502   \u251c\u2500\u2500 gen\n\u2502   \u2502   \u2514\u2500\u2500 k8s.io\n\u2502   \u2502       \u251c\u2500\u2500 api\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 apps\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 core\n\u2502   \u2502       \u2514\u2500\u2500 apimachinery\n\u2502   \u2502           \u2514\u2500\u2500 pkg\n\u2502   \u251c\u2500\u2500 module.cue\n\u2502   \u251c\u2500\u2500 pkg\n\u2502   \u2514\u2500\u2500 usr\n\u251c\u2500\u2500 def.cue\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 go.sum\n")),Object(r.b)("p",null,"The package import path in CUE template should be:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cue"},'import (\n   apps "k8s.io/api/apps/v1"\n   corev1 "k8s.io/api/core/v1"\n)\n')),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"Refactor directory hierarchy.")),Object(r.b)("p",null,"Our goal is to test template locally and use the same template in KubeVela.\nSo we need to refactor our local CUE module directories a bit to align with the import path provided by KubeVela,"),Object(r.b)("p",null,"Copy the ",Object(r.b)("inlineCode",{parentName:"p"},"apps")," and ",Object(r.b)("inlineCode",{parentName:"p"},"core")," from ",Object(r.b)("inlineCode",{parentName:"p"},"cue.mod/gen/k8s.io/api")," to ",Object(r.b)("inlineCode",{parentName:"p"},"cue.mod/gen/k8s.io"),".\n(Note we should keep the source directory ",Object(r.b)("inlineCode",{parentName:"p"},"apps")," and ",Object(r.b)("inlineCode",{parentName:"p"},"core")," in ",Object(r.b)("inlineCode",{parentName:"p"},"gen/k8s.io/api")," to avoid package dependency issues)."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"cp -r cue.mod/gen/k8s.io/api/apps cue.mod/gen/k8s.io\ncp -r cue.mod/gen/k8s.io/api/core cue.mod/gen/k8s.io\n")),Object(r.b)("p",null,"The modified module directory should like:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"\u251c\u2500\u2500 cue.mod\n\u2502   \u251c\u2500\u2500 gen\n\u2502   \u2502   \u2514\u2500\u2500 k8s.io\n\u2502   \u2502       \u251c\u2500\u2500 api\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 apps\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 core\n\u2502   \u2502       \u251c\u2500\u2500 apimachinery\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 pkg\n\u2502   \u2502       \u251c\u2500\u2500 apps\n\u2502   \u2502       \u2514\u2500\u2500 core\n\u2502   \u251c\u2500\u2500 module.cue\n\u2502   \u251c\u2500\u2500 pkg\n\u2502   \u2514\u2500\u2500 usr\n\u251c\u2500\u2500 def.cue\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 go.sum\n")),Object(r.b)("p",null,"So, you can import the package use the following path that aligns with KubeVela:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cue"},'import (\n   apps "k8s.io/apps/v1"\n   corev1 "k8s.io/core/v1"\n)\n')),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"Test and Run.")),Object(r.b)("p",null,"Finally, we can test CUE Template which use the ",Object(r.b)("inlineCode",{parentName:"p"},"Kube")," package."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cue"},'import (\n   apps "k8s.io/apps/v1"\n   corev1 "k8s.io/core/v1"\n)\n\n// output is validated by Deployment.\noutput: apps.#Deployment\noutput: {\n    metadata: {\n        name:      context.name\n        namespace: "default"\n    }\n    spec: {\n        selector: matchLabels: {\n            "app": context.name\n        }\n        template: {\n            metadata: {\n                labels: {\n                    "app":     context.name\n                    "version": parameter.version\n                }\n            }\n            spec: {\n                terminationGracePeriodSeconds: parameter.podShutdownGraceSeconds\n                containers: [{\n                    name:  context.name\n                    image: parameter.image\n                    ports: [{\n                        if parameter.containerPort != _|_ {\n                            containerPort: parameter.containerPort\n                        }\n                        if parameter.containerPort == _|_ {\n                            containerPort: parameter.servicePort\n                        }\n                    }]\n                    if parameter.env != _|_ {\n                        env: [\n                            for k, v in parameter.env {\n                                name:  k\n                                value: v\n                            },\n                        ]\n                    }\n                    resources: {\n                        requests: {\n                            if parameter.cpu != _|_ {\n                                cpu: parameter.cpu\n                            }\n                            if parameter.memory != _|_ {\n                                memory: parameter.memory\n                            }\n                        }\n                    }\n                }]\n            }\n        }\n    }\n}\n\noutputs:{\n  service: corev1.#Service\n}\n\n\n// Service\noutputs: service: {\n    metadata: {\n        name: context.name\n        labels: {\n            "app": context.name\n        }\n    }\n    spec: {\n        //type: "ClusterIP"\n        selector: {\n            "app": context.name\n        }\n        ports: [{\n            port: parameter.servicePort\n            if parameter.containerPort != _|_ {\n                targetPort: parameter.containerPort\n            }\n            if parameter.containerPort == _|_ {\n                targetPort: parameter.servicePort\n            }\n        }]\n    }\n}\nparameter: {\n    version:        *"v1" | string\n    image:          string\n    servicePort:    int\n    containerPort?: int\n    // +usage=Optional duration in seconds the pod needs to terminate gracefully\n    podShutdownGraceSeconds: *30 | int\n    env: [string]: string\n    cpu?:    string\n    memory?: string\n}\n\n// mock context data\ncontext: {\n    name: "test"\n}\n\n// mock parameter data\nparameter: {\n    image:          "test-image"\n    servicePort:    8000\n    env: {\n        "HELLO": "WORLD"\n    }\n}\n')),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"cue export")," to see the export result."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ cue export def.cue --out yaml\noutput:\n  metadata:\n    name: test\n    namespace: default\n  spec:\n    selector:\n      matchLabels:\n        app: test\n    template:\n      metadata:\n        labels:\n          app: test\n          version: v1\n      spec:\n        terminationGracePeriodSeconds: 30\n        containers:\n        - name: test\n          image: test-image\n          ports:\n          - containerPort: 8000\n          env:\n          - name: HELLO\n            value: WORLD\n          resources:\n            requests: {}\noutputs:\n  service:\n    metadata:\n      name: test\n      labels:\n        app: test\n    spec:\n      selector:\n        app: test\n      ports:\n      - port: 8000\n        targetPort: 8000\nparameter:\n  version: v1\n  image: test-image\n  servicePort: 8000\n  podShutdownGraceSeconds: 30\n  env:\n    HELLO: WORLD\ncontext:\n  name: test\n")),Object(r.b)("h2",{id:"dry-run-the-application"},"Dry-Run the ",Object(r.b)("inlineCode",{parentName:"h2"},"Application")),Object(r.b)("p",null,"When CUE template is good, we can use ",Object(r.b)("inlineCode",{parentName:"p"},"vela system dry-run")," to dry run and check the rendered resources in real Kubernetes cluster. This command will exactly execute the same render logic in KubeVela's ",Object(r.b)("inlineCode",{parentName:"p"},"Application")," Controller and output the result for you."),Object(r.b)("p",null,"First, we need use ",Object(r.b)("inlineCode",{parentName:"p"},"mergedef.sh")," to merge the definition and cue files."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"$ mergedef.sh def.yaml def.cue > componentdef.yaml\n")),Object(r.b)("p",null,"Then, let's create an Application named ",Object(r.b)("inlineCode",{parentName:"p"},"test-app.yaml"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: boutique\n  namespace: default\nspec:\n  components:\n    - name: frontend\n      type: microservice\n      properties:\n        image: registry.cn-hangzhou.aliyuncs.com/vela-samples/frontend:v0.2.2\n        servicePort: 80\n        containerPort: 8080\n        env:\n          PORT: "8080"\n        cpu: "100m"\n        memory: "64Mi"\n')),Object(r.b)("p",null,"Dry run the application by using ",Object(r.b)("inlineCode",{parentName:"p"},"vela system dry-run"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},'$ vela system dry-run -f test-app.yaml -d componentdef.yaml\n---\n# Application(boutique) -- Comopnent(frontend)\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.oam.dev/component: frontend\n    app.oam.dev/name: boutique\n    workload.oam.dev/type: microservice\n  name: frontend\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n        version: v1\n    spec:\n      containers:\n      - env:\n        - name: PORT\n          value: "8080"\n        image: registry.cn-hangzhou.aliyuncs.com/vela-samples/frontend:v0.2.2\n        name: frontend\n        ports:\n        - containerPort: 8080\n        resources:\n          requests:\n            cpu: 100m\n            memory: 64Mi\n      serviceAccountName: default\n      terminationGracePeriodSeconds: 30\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: frontend\n    app.oam.dev/component: frontend\n    app.oam.dev/name: boutique\n    trait.oam.dev/resource: service\n    trait.oam.dev/type: AuxiliaryWorkload\n  name: frontend\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n  selector:\n    app: frontend\n  type: ClusterIP\n\n---\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"-d")," or ",Object(r.b)("inlineCode",{parentName:"p"},"--definitions")," is a useful flag permitting user to provide capability\ndefinitions used in the application from local files.\n",Object(r.b)("inlineCode",{parentName:"p"},"dry-run")," cmd will prioritize the provided capabilities than the living\nones in the cluster.\nIf the capability is not found in local files and cluster, it will raise an error."),Object(r.b)("h2",{id:"live-diff-the-application"},"Live-Diff the ",Object(r.b)("inlineCode",{parentName:"h2"},"Application")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"vela system live-diff")," allows users to have a preview of what would change if\nupgrade an application.\nIt basically generates a diff between the specific revision of an application\nand the result of ",Object(r.b)("inlineCode",{parentName:"p"},"vela system dry-run"),".\nThe result shows the changes (added/modified/removed/no_change) of the application as well as its sub-resources, such as components and traits.\n",Object(r.b)("inlineCode",{parentName:"p"},"live-diff")," will not make any changes to the living cluster, so it's very\nhelpful if you want to update an application but worry about the unknown results\nthat may be produced."),Object(r.b)("p",null,"Let's prepare an application and deploy it."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"ComponentDefinitions and TraitDefinitions used in this sample are stored in\n",Object(r.b)("inlineCode",{parentName:"p"},"./doc/examples/live-diff/definitions"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'# app.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: livediff-demo\nspec:\n  components:\n    - name: myweb-1\n      type: myworker\n      properties:\n        image: "busybox"\n        cmd:\n          - sleep\n          - "1000"\n        lives: "3"\n        enemies: "alien"\n      traits:\n        - type: myingress\n          properties:\n            domain: "www.example.com"\n            http:\n              "/": 80\n        - type: myscaler\n          properties:\n            replicas: 2\n    - name: myweb-2\n      type: myworker\n      properties:\n        image: "busybox"\n        cmd:\n          - sleep\n          - "1000"\n        lives: "3"\n        enemies: "alien"\n')),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"kubectl apply ./doc/examples/live-diff/definitions\nkubectl apply ./doc/examples/live-diff/app.yaml\n")),Object(r.b)("p",null,"Then, assume we want to update the application with below configuration.\nTo preview changes brought by updating while not really apply updated\nconfiguration into the cluster, we can use ",Object(r.b)("inlineCode",{parentName:"p"},"live-diff")," here."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'# app-updated.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: livediff-demo\nspec:\n  components:\n    - name: myweb-1\n      type: myworker\n      properties:\n        image: "busybox"\n        cmd:\n          - sleep\n          - "2000" # change a component property\n        lives: "3"\n        enemies: "alien"\n      traits:\n        - type: myingress\n          properties:\n            domain: "www.example.com"\n            http:\n              "/": 90 # change a trait\n        # - type: myscaler # remove a trait\n        #   properties:\n        #     replicas: 2\n    - name: myweb-2\n      type: myworker\n      properties: # no change on component property\n        image: "busybox"\n        cmd:\n          - sleep\n          - "1000"\n        lives: "3"\n        enemies: "alien"\n      traits:\n        - type: myingress # add a trait\n          properties:\n            domain: "www.example.com"\n            http:\n              "/": 90\n    - name: myweb-3  # add a component\n      type: myworker\n      properties:\n        image: "busybox"\n        cmd:\n          - sleep\n          - "1000"\n        lives: "3"\n        enemies: "alien"\n      traits:\n        - type: myingress\n          properties:\n            domain: "www.example.com"\n            http:\n              "/": 90\n')),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"vela system live-diff -f  ./doc/examples/live-diff/app-modified.yaml -r livediff-demo-v1\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"-r")," or ",Object(r.b)("inlineCode",{parentName:"p"},"--revision")," is a flag that specifies the name of a living\n",Object(r.b)("inlineCode",{parentName:"p"},"ApplicationRevision")," with which you want to compare the updated application."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"-c")," or ",Object(r.b)("inlineCode",{parentName:"p"},"--context")," is a flag that specifies the number of lines shown around a\nchange.\nThe unchanged lines which are out of the context of a change will be omitted.\nIt's useful if the diff result contains a lot of unchanged content while\nyou just want to focus on the changed ones."),Object(r.b)("details",null,Object(r.b)("summary",null," Click to view diff result "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},'---\n# Application (application-sample) has been modified(*)\n---\n  apiVersion: core.oam.dev/v1beta1\n  kind: Application\n  metadata:\n    creationTimestamp: null\n-   name: application-sample\n+   name: livediff-demo\n    namespace: default\n  spec:\n    components:\n    - name: myweb-1\n+     properties:\n+       cmd:\n+       - sleep\n+       - "2000"\n+       enemies: alien\n+       image: busybox\n+       lives: "3"\n+     traits:\n+     - properties:\n+         domain: www.example.com\n+         http:\n+           /: 90\n+       type: myingress\n+     type: myworker\n+   - name: myweb-2\n      properties:\n        cmd:\n        - sleep\n        - "1000"\n        enemies: alien\n        image: busybox\n        lives: "3"\n      traits:\n      - properties:\n          domain: www.example.com\n          http:\n-           /: 80\n+           /: 90\n        type: myingress\n-     - properties:\n-         replicas: 2\n-       type: myscaler\n      type: myworker\n-   - name: myweb-2\n+   - name: myweb-3\n      properties:\n        cmd:\n        - sleep\n        - "1000"\n        enemies: alien\n        image: busybox\n        lives: "3"\n+     traits:\n+     - properties:\n+         domain: www.example.com\n+         http:\n+           /: 90\n+       type: myingress\n      type: myworker\n  status:\n    batchRollingState: ""\n    currentBatch: 0\n    rollingState: ""\n    upgradedReadyReplicas: 0\n    upgradedReplicas: 0\n  \n---\n## Component (myweb-1) has been modified(*)\n---\n  apiVersion: core.oam.dev/v1alpha2\n  kind: Component\n  metadata:\n    creationTimestamp: null\n    labels:\n-     app.oam.dev/name: application-sample\n+     app.oam.dev/name: livediff-demo\n    name: myweb-1\n  spec:\n    workload:\n      apiVersion: apps/v1\n      kind: Deployment\n      metadata:\n        labels:\n          app.oam.dev/appRevision: ""\n          app.oam.dev/component: myweb-1\n-         app.oam.dev/name: application-sample\n+         app.oam.dev/name: livediff-demo\n          workload.oam.dev/type: myworker\n      spec:\n        selector:\n          matchLabels:\n            app.oam.dev/component: myweb-1\n        template:\n          metadata:\n            labels:\n              app.oam.dev/component: myweb-1\n          spec:\n            containers:\n            - command:\n              - sleep\n-             - "1000"\n+             - "2000"\n              image: busybox\n              name: myweb-1\n  status:\n    observedGeneration: 0\n  \n---\n### Component (myweb-1) / Trait (myingress/ingress) has been modified(*)\n---\n  apiVersion: networking.k8s.io/v1beta1\n  kind: Ingress\n  metadata:\n    labels:\n      app.oam.dev/appRevision: ""\n      app.oam.dev/component: myweb-1\n-     app.oam.dev/name: application-sample\n+     app.oam.dev/name: livediff-demo\n      trait.oam.dev/resource: ingress\n      trait.oam.dev/type: myingress\n    name: myweb-1\n  spec:\n    rules:\n    - host: www.example.com\n      http:\n        paths:\n        - backend:\n            serviceName: myweb-1\n-           servicePort: 80\n+           servicePort: 90\n          path: /\n  \n---\n### Component (myweb-1) / Trait (myingress/service) has been modified(*)\n---\n  apiVersion: v1\n  kind: Service\n  metadata:\n    labels:\n      app.oam.dev/appRevision: ""\n      app.oam.dev/component: myweb-1\n-     app.oam.dev/name: application-sample\n+     app.oam.dev/name: livediff-demo\n      trait.oam.dev/resource: service\n      trait.oam.dev/type: myingress\n    name: myweb-1\n  spec:\n    ports:\n-   - port: 80\n-     targetPort: 80\n+   - port: 90\n+     targetPort: 90\n    selector:\n      app.oam.dev/component: myweb-1\n  \n---\n### Component (myweb-1) / Trait (myscaler/scaler) has been removed(-)\n---\n- apiVersion: core.oam.dev/v1alpha2\n- kind: ManualScalerTrait\n- metadata:\n-   labels:\n-     app.oam.dev/appRevision: ""\n-     app.oam.dev/component: myweb-1\n-     app.oam.dev/name: application-sample\n-     trait.oam.dev/resource: scaler\n-     trait.oam.dev/type: myscaler\n- spec:\n-   replicaCount: 2\n  \n---\n## Component (myweb-2) has been modified(*)\n---\n  apiVersion: core.oam.dev/v1alpha2\n  kind: Component\n  metadata:\n    creationTimestamp: null\n    labels:\n-     app.oam.dev/name: application-sample\n+     app.oam.dev/name: livediff-demo\n    name: myweb-2\n  spec:\n    workload:\n      apiVersion: apps/v1\n      kind: Deployment\n      metadata:\n        labels:\n          app.oam.dev/appRevision: ""\n          app.oam.dev/component: myweb-2\n-         app.oam.dev/name: application-sample\n+         app.oam.dev/name: livediff-demo\n          workload.oam.dev/type: myworker\n      spec:\n        selector:\n          matchLabels:\n            app.oam.dev/component: myweb-2\n        template:\n          metadata:\n            labels:\n              app.oam.dev/component: myweb-2\n          spec:\n            containers:\n            - command:\n              - sleep\n              - "1000"\n              image: busybox\n              name: myweb-2\n  status:\n    observedGeneration: 0\n  \n---\n### Component (myweb-2) / Trait (myingress/ingress) has been added(+)\n---\n+ apiVersion: networking.k8s.io/v1beta1\n+ kind: Ingress\n+ metadata:\n+   labels:\n+     app.oam.dev/appRevision: ""\n+     app.oam.dev/component: myweb-2\n+     app.oam.dev/name: livediff-demo\n+     trait.oam.dev/resource: ingress\n+     trait.oam.dev/type: myingress\n+   name: myweb-2\n+ spec:\n+   rules:\n+   - host: www.example.com\n+     http:\n+       paths:\n+       - backend:\n+           serviceName: myweb-2\n+           servicePort: 90\n+         path: /\n  \n---\n### Component (myweb-2) / Trait (myingress/service) has been added(+)\n---\n+ apiVersion: v1\n+ kind: Service\n+ metadata:\n+   labels:\n+     app.oam.dev/appRevision: ""\n+     app.oam.dev/component: myweb-2\n+     app.oam.dev/name: livediff-demo\n+     trait.oam.dev/resource: service\n+     trait.oam.dev/type: myingress\n+   name: myweb-2\n+ spec:\n+   ports:\n+   - port: 90\n+     targetPort: 90\n+   selector:\n+     app.oam.dev/component: myweb-2\n  \n---\n## Component (myweb-3) has been added(+)\n---\n+ apiVersion: core.oam.dev/v1alpha2\n+ kind: Component\n+ metadata:\n+   creationTimestamp: null\n+   labels:\n+     app.oam.dev/name: livediff-demo\n+   name: myweb-3\n+ spec:\n+   workload:\n+     apiVersion: apps/v1\n+     kind: Deployment\n+     metadata:\n+       labels:\n+         app.oam.dev/appRevision: ""\n+         app.oam.dev/component: myweb-3\n+         app.oam.dev/name: livediff-demo\n+         workload.oam.dev/type: myworker\n+     spec:\n+       selector:\n+         matchLabels:\n+           app.oam.dev/component: myweb-3\n+       template:\n+         metadata:\n+           labels:\n+             app.oam.dev/component: myweb-3\n+         spec:\n+           containers:\n+           - command:\n+             - sleep\n+             - "1000"\n+             image: busybox\n+             name: myweb-3\n+ status:\n+   observedGeneration: 0\n  \n---\n### Component (myweb-3) / Trait (myingress/ingress) has been added(+)\n---\n+ apiVersion: networking.k8s.io/v1beta1\n+ kind: Ingress\n+ metadata:\n+   labels:\n+     app.oam.dev/appRevision: ""\n+     app.oam.dev/component: myweb-3\n+     app.oam.dev/name: livediff-demo\n+     trait.oam.dev/resource: ingress\n+     trait.oam.dev/type: myingress\n+   name: myweb-3\n+ spec:\n+   rules:\n+   - host: www.example.com\n+     http:\n+       paths:\n+       - backend:\n+           serviceName: myweb-3\n+           servicePort: 90\n+         path: /\n  \n---\n### Component (myweb-3) / Trait (myingress/service) has been added(+)\n---\n+ apiVersion: v1\n+ kind: Service\n+ metadata:\n+   labels:\n+     app.oam.dev/appRevision: ""\n+     app.oam.dev/component: myweb-3\n+     app.oam.dev/name: livediff-demo\n+     trait.oam.dev/resource: service\n+     trait.oam.dev/type: myingress\n+   name: myweb-3\n+ spec:\n+   ports:\n+   - port: 90\n+     targetPort: 90\n+   selector:\n+     app.oam.dev/component: myweb-3\n'))))}l.isMDXComponent=!0},307:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return u}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),l=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},m=function(e){var n=l(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(t),b=a,u=m["".concat(i,".").concat(b)]||m[b]||d[b]||r;return t?o.a.createElement(u,p(p({ref:n},s),{},{components:t})):o.a.createElement(u,p({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=b;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<r;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);