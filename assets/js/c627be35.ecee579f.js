(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[711],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),u=r,f=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(f,o(o({ref:n},p),{},{components:t})):a.createElement(f,o({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},33871:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var a=t(22122),r=t(19756),i=(t(67294),t(3905)),o={title:"Crossplane"},s={unversionedId:"platform-engineers/cloud-services",id:"version-v1.0/platform-engineers/cloud-services",isDocsHomePage:!1,title:"Crossplane",description:"Cloud services is also part of your application deployment.",source:"@site/versioned_docs/version-v1.0/platform-engineers/cloud-services.md",sourceDirName:"platform-engineers",slug:"/platform-engineers/cloud-services",permalink:"/docs/platform-engineers/cloud-services",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/platform-engineers/cloud-services.md",version:"v1.0",lastUpdatedBy:"yangsoon",lastUpdatedAt:1621315429,formattedLastUpdatedAt:"5/18/2021",frontMatter:{title:"Crossplane"},sidebar:"defaultSidebar",previous:{title:"Extend CRD Operator as Component Type",permalink:"/docs/platform-engineers/cloneset"},next:{title:"Debug, Test and Dry-run",permalink:"/docs/platform-engineers/debug-test-cue"}},c=[{value:"Should a Cloud Service be a Component or Trait?",id:"should-a-cloud-service-be-a-component-or-trait",children:[]},{value:"Install and Configure Crossplane",id:"install-and-configure-crossplane",children:[]},{value:"Register ComponentDefinition and TraitDefinition",id:"register-componentdefinition-and-traitdefinition",children:[{value:"Register ComponentDefinition <code>alibaba-rds</code> as RDS cloud resource producer",id:"register-componentdefinition-alibaba-rds-as-rds-cloud-resource-producer",children:[]},{value:"Register ComponentDefinition <code>alibaba-oss</code> as OSS cloud resource producer",id:"register-componentdefinition-alibaba-oss-as-oss-cloud-resource-producer",children:[]},{value:"Register ComponentDefinition <code>webconsumer</code> with Secret Reference",id:"register-componentdefinition-webconsumer-with-secret-reference",children:[]},{value:"Prepare TraitDefinition <code>service-binding</code> to do env-secret mapping",id:"prepare-traitdefinition-service-binding-to-do-env-secret-mapping",children:[]}]}],l={toc:c};function p(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Cloud services is also part of your application deployment."),(0,i.kt)("h2",{id:"should-a-cloud-service-be-a-component-or-trait"},"Should a Cloud Service be a Component or Trait?"),(0,i.kt)("p",null,"The following practice could be considered:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ComponentDefinition")," if:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'you want to allow your end users explicitly claim a "instance" of the cloud service and consume it, and release the "instance" when deleting the application.'))),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"TraitDefinition")," if:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"you don't want to give your end users any control/workflow of claiming or releasing the cloud service, you only want to give them a way to consume a cloud service which could even be managed by some other system. A ",(0,i.kt)("inlineCode",{parentName:"li"},"Service Binding")," trait is widely used in this case.")))),(0,i.kt)("p",null,"In this documentation, we will define an Alibaba Cloud's RDS (Relational Database Service), and an Alibaba Cloud's OSS (Object Storage System) as example. This mechanism works the same with other cloud providers.\nIn a single application, they are in form of Traits, and in multiple applications, they are in form of Components."),(0,i.kt)("h2",{id:"install-and-configure-crossplane"},"Install and Configure Crossplane"),(0,i.kt)("p",null,"This guide will use ",(0,i.kt)("a",{parentName:"p",href:"https://crossplane.io/"},"Crossplane")," as the cloud service provider. Please Refer to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/crossplane/provider-alibaba/releases/tag/v0.5.0"},"Installation"),"\nto install Crossplane Alibaba provider v0.5.0."),(0,i.kt)("p",null,"If you'd like to configure any other Crossplane providers, please refer to ",(0,i.kt)("a",{parentName:"p",href:"https://crossplane.io/docs/v1.1/getting-started/install-configure.html#select-a-getting-started-configuration"},"Crossplane Select a Getting Started Configuration"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ kubectl crossplane install provider crossplane/provider-alibaba:v0.5.0\n\n# Note the xxx and yyy here is your own AccessKey and SecretKey to the cloud resources.\n$ kubectl create secret generic alibaba-account-creds -n crossplane-system --from-literal=accessKeyId=xxx --from-literal=accessKeySecret=yyy\n\n$ kubectl apply -f provider.yaml\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"provider.yaml")," is as below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: crossplane-system\n\n---\napiVersion: alibaba.crossplane.io/v1alpha1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: alibaba-account-creds\n      key: credentials\n  region: cn-beijing\n")),(0,i.kt)("p",null,"Note: We currently just use Crossplane Alibaba provider. But we are about to use ",(0,i.kt)("a",{parentName:"p",href:"https://crossplane.io/"},"Crossplane")," as the\ncloud resource operator for Kubernetes in the near future."),(0,i.kt)("h2",{id:"register-componentdefinition-and-traitdefinition"},"Register ComponentDefinition and TraitDefinition"),(0,i.kt)("h3",{id:"register-componentdefinition-alibaba-rds-as-rds-cloud-resource-producer"},"Register ComponentDefinition ",(0,i.kt)("inlineCode",{parentName:"h3"},"alibaba-rds")," as RDS cloud resource producer"),(0,i.kt)("p",null,"Register the ",(0,i.kt)("inlineCode",{parentName:"p"},"alibaba-rds")," workload type to KubeVela."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: ComponentDefinition\nmetadata:\n  name: alibaba-rds\n  namespace: vela-system\n  annotations:\n    definition.oam.dev/description: "Alibaba Cloud RDS Resource"\nspec:\n  workload:\n    definition:\n      apiVersion: database.alibaba.crossplane.io/v1alpha1\n      kind: RDSInstance\n  schematic:\n    cue:\n      template: |\n        output: {\n            apiVersion: "database.alibaba.crossplane.io/v1alpha1"\n            kind:       "RDSInstance"\n            spec: {\n                forProvider: {\n                    engine:                parameter.engine\n                    engineVersion:         parameter.engineVersion\n                    dbInstanceClass:       parameter.instanceClass\n                    dbInstanceStorageInGB: 20\n                    securityIPList:        "0.0.0.0/0"\n                    masterUsername:        parameter.username\n                }\n                writeConnectionSecretToRef: {\n                    namespace: context.namespace\n                    name:      parameter.secretName\n                }\n                providerConfigRef: {\n                    name: "default"\n                }\n                deletionPolicy: "Delete"\n            }\n        }\n        parameter: {\n            // +usage=RDS engine\n            engine: *"mysql" | string\n            // +usage=The version of RDS engine\n            engineVersion: *"8.0" | string\n            // +usage=The instance class for the RDS\n            instanceClass: *"rds.mysql.c1.large" | string\n            // +usage=RDS username\n            username: string\n            // +usage=Secret name which RDS connection will write to\n            secretName: string\n        }\n\n\n')),(0,i.kt)("h3",{id:"register-componentdefinition-alibaba-oss-as-oss-cloud-resource-producer"},"Register ComponentDefinition ",(0,i.kt)("inlineCode",{parentName:"h3"},"alibaba-oss")," as OSS cloud resource producer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: ComponentDefinition\nmetadata:\n  name: alibaba-oss\n  namespace: vela-system\n  annotations:\n    definition.oam.dev/description: "Alibaba Cloud OSS Resource"\nspec:\n  workload:\n    definition:\n      apiVersion: oss.alibaba.crossplane.io/v1alpha1\n      kind: Bucket\n  schematic:\n    cue:\n      template: |\n        output: {\n            apiVersion: "oss.alibaba.crossplane.io/v1alpha1"\n            kind:       "Bucket"\n            spec: {\n                name:               parameter.name\n                acl:                parameter.acl\n                storageClass:       parameter.storageClass\n                dataRedundancyType: parameter.dataRedundancyType\n                writeConnectionSecretToRef: {\n                    namespace: context.namespace\n                    name:      parameter.secretName\n                }\n                providerConfigRef: {\n                    name: "default"\n                }\n                deletionPolicy: "Delete"\n            }\n        }\n        parameter: {\n            // +usage=OSS bucket name\n            name: string\n            // +usage=The access control list of the OSS bucket\n            acl: *"private" | string\n            // +usage=The storage type of OSS bucket\n            storageClass: *"Standard" | string\n            // +usage=The data Redundancy type of OSS bucket\n            dataRedundancyType: *"LRS" | string\n            // +usage=Secret name which RDS connection will write to\n            secretName: string\n        }\n\n')),(0,i.kt)("h3",{id:"register-componentdefinition-webconsumer-with-secret-reference"},"Register ComponentDefinition ",(0,i.kt)("inlineCode",{parentName:"h3"},"webconsumer")," with Secret Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: ComponentDefinition\nmetadata:\n  name: webconsumer\n  annotations:\n    definition.oam.dev/description: A Deployment provides declarative updates for Pods and ReplicaSets\nspec:\n  workload:\n    definition:\n      apiVersion: apps/v1\n      kind: Deployment\n  schematic:\n    cue:\n      template: |\n        output: {\n            apiVersion: "apps/v1"\n            kind:       "Deployment"\n            spec: {\n                selector: matchLabels: {\n                    "app.oam.dev/component": context.name\n                }\n\n                template: {\n                    metadata: labels: {\n                        "app.oam.dev/component": context.name\n                    }\n\n                    spec: {\n                        containers: [{\n                            name:  context.name\n                            image: parameter.image\n\n                            if parameter["cmd"] != _|_ {\n                                command: parameter.cmd\n                            }\n\n                            if parameter["dbSecret"] != _|_ {\n                                env: [\n                                    {\n                                        name:  "username"\n                                        value: dbConn.username\n                                    },\n                                    {\n                                        name:  "endpoint"\n                                        value: dbConn.endpoint\n                                    },\n                                    {\n                                        name:  "DB_PASSWORD"\n                                        value: dbConn.password\n                                    },\n                                ]\n                            }\n\n                            ports: [{\n                                containerPort: parameter.port\n                            }]\n\n                            if parameter["cpu"] != _|_ {\n                                resources: {\n                                    limits:\n                                        cpu: parameter.cpu\n                                    requests:\n                                        cpu: parameter.cpu\n                                }\n                            }\n                        }]\n                }\n                }\n            }\n        }\n\n        parameter: {\n            // +usage=Which image would you like to use for your service\n            // +short=i\n            image: string\n\n            // +usage=Commands to run in the container\n            cmd?: [...string]\n\n            // +usage=Which port do you want customer traffic sent to\n            // +short=p\n            port: *80 | int\n\n            // +usage=Referred db secret\n            // +insertSecretTo=dbConn\n            dbSecret?: string\n\n            // +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)\n            cpu?: string\n        }\n\n        dbConn: {\n            username: string\n            endpoint: string\n            password: string\n        }\n\n')),(0,i.kt)("p",null,"The key point is the annotation ",(0,i.kt)("inlineCode",{parentName:"p"},"//+insertSecretTo=dbConn"),", KubeVela will know the parameter is a K8s secret, it will parse\nthe secret and bind the data into the CUE struct ",(0,i.kt)("inlineCode",{parentName:"p"},"dbConn"),"."),(0,i.kt)("p",null,"Then the ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," can reference the ",(0,i.kt)("inlineCode",{parentName:"p"},"dbConn")," struct for the data value. The name ",(0,i.kt)("inlineCode",{parentName:"p"},"dbConn")," can be any name.\nIt's just an example in this case. The ",(0,i.kt)("inlineCode",{parentName:"p"},"+insertSecretTo")," is keyword, it defines the data binding mechanism."),(0,i.kt)("h3",{id:"prepare-traitdefinition-service-binding-to-do-env-secret-mapping"},"Prepare TraitDefinition ",(0,i.kt)("inlineCode",{parentName:"h3"},"service-binding")," to do env-secret mapping"),(0,i.kt)("p",null,"As for data binding in Application, KubeVela recommends defining a trait to finish the job. We have prepared a common\ntrait for convenience. This trait works well for binding resources' info into pod spec Env."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: TraitDefinition\nmetadata:\n  annotations:\n    definition.oam.dev/description: "binding cloud resource secrets to pod env"\n  name: service-binding\nspec:\n  appliesToWorkloads:\n    - webservice\n    - worker\n  schematic:\n    cue:\n      template: |\n        patch: {\n            spec: template: spec: {\n                // +patchKey=name\n                containers: [{\n                    name: context.name\n                    // +patchKey=name\n                    env: [\n                        for envName, v in parameter.envMappings {\n                            name: envName\n                            valueFrom: {\n                                secretKeyRef: {\n                                    name: v.secret\n                                    if v["key"] != _|_ {\n                                        key: v.key\n                                    }\n                                    if v["key"] == _|_ {\n                                        key: envName\n                                    }\n                                }\n                            }\n                        },\n                    ]\n                }]\n            }\n        }\n\n        parameter: {\n            // +usage=The mapping of environment variables to secret\n            envMappings: [string]: [string]: string\n        }\n\n')),(0,i.kt)("p",null,"With the help of this ",(0,i.kt)("inlineCode",{parentName:"p"},"service-binding")," trait, developers can explicitly set parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"envMappings")," to mapping all\nenvironment names with secret key. Here is an example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n      traits:\n        - type: service-binding\n          properties:\n            envMappings:\n              # environments refer to db-conn secret\n              DB_PASSWORD:\n                secret: db-conn\n                key: password                                     # 1) If the env name is different from secret key, secret key has to be set.\n              endpoint:\n                secret: db-conn                                   # 2) If the env name is the same as the secret key, secret key can be omitted.\n              username:\n                secret: db-conn\n              # environments refer to oss-conn secret\n              BUCKET_NAME:\n                secret: oss-conn\n                key: Bucket\n...\n")),(0,i.kt)("p",null,"You can see ",(0,i.kt)("a",{parentName:"p",href:"../end-user/cloud-resources"},"the end user usage workflow")," to know how it used."))}p.isMDXComponent=!0}}]);