(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{249:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),o=(t(0),t(341)),i={title:"Application"},l={unversionedId:"end-user/application",id:"end-user/application",isDocsHomePage:!1,title:"Application",description:"This documentation will walk through how to use KubeVela to design a simple application without any placement rule.",source:"@site/docs/end-user/application.md",slug:"/end-user/application",permalink:"/docs/next/end-user/application",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/end-user/application.md",version:"current",lastUpdatedBy:"kubevela-bot",lastUpdatedAt:1620154848,formattedLastUpdatedAt:"5/4/2021",sidebar:"docs",previous:{title:"How it Works",permalink:"/docs/next/concepts"},next:{title:"Web Service",permalink:"/docs/next/end-user/components/webservice"}},c=[{value:"Step 1: Check Available Components",id:"step-1-check-available-components",children:[]},{value:"Step 2: Declare an Application",id:"step-2-declare-an-application",children:[]},{value:"Step 3: Attach Traits",id:"step-3-attach-traits",children:[]},{value:"Step 4: Deploy the Application",id:"step-4-deploy-the-application",children:[{value:"List Revisions",id:"list-revisions",children:[]},{value:"Verify",id:"verify",children:[]}]}],s={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This documentation will walk through how to use KubeVela to design a simple application without any placement rule."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note: since you didn't declare placement rule, KubeVela will deploy this application directly to the control plane cluster (i.e. the cluster your ",Object(o.b)("inlineCode",{parentName:"p"},"kubectl")," is talking to). This is also the same case if you are using local cluster such as KinD or MiniKube to play KubeVela.")),Object(o.b)("h2",{id:"step-1-check-available-components"},"Step 1: Check Available Components"),Object(o.b)("p",null,"Components are deployable or provisionable entities that compose your application. It could be a Helm chart, a simple Kubernetes workload, a CUE or Terraform module, or a cloud database etc."),Object(o.b)("p",null,"Let's check the available components in fresh new KubeVela."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"kubectl get comp -n vela-system\nNAME              WORKLOAD-KIND   DESCRIPTION                        \ntask              Job             Describes jobs that run code or a script to completion.                                                                                          \nwebservice        Deployment      Describes long-running, scalable, containerized services that have a stable network endpoint to receive external network traffic from customers. \nworker            Deployment      Describes long-running, scalable, containerized services that running at backend. They do NOT have network endpoint to receive external network traffic.\n")),Object(o.b)("p",null,"To show the specification for given component, you could use ",Object(o.b)("inlineCode",{parentName:"p"},"vela show"),". "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl vela show webservice\n# Properties\n+------------------+----------------------------------------------------------------------------------+-----------------------+----------+---------+\n|       NAME       |                                   DESCRIPTION                                    |         TYPE          | REQUIRED | DEFAULT |\n+------------------+----------------------------------------------------------------------------------+-----------------------+----------+---------+\n| cmd              | Commands to run in the container                                                 | []string              | false    |         |\n| env              | Define arguments by using environment variables                                  | [[]env](#env)         | false    |         |\n| addRevisionLabel |                                                                                  | bool                  | true     | false   |\n| image            | Which image would you like to use for your service                               | string                | true     |         |\n| port             | Which port do you want customer traffic sent to                                  | int                   | true     |      80 |\n| cpu              | Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core) | string                | false    |         |\n| volumes          | Declare volumes and volumeMounts                                                 | [[]volumes](#volumes) | false    |         |\n+------------------+----------------------------------------------------------------------------------+-----------------------+----------+---------+\n... // skip other fields\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Tips: ",Object(o.b)("inlineCode",{parentName:"p"},"vela show xxx --web")," will open its capability reference documentation in your default browser.")),Object(o.b)("p",null,"You could always ",Object(o.b)("a",{parentName:"p",href:"components/more"},"add more components")," to the platform at any time."),Object(o.b)("h2",{id:"step-2-declare-an-application"},"Step 2: Declare an Application"),Object(o.b)("p",null,"Application is the full description of a deployment. Let's define an application that deploys a ",Object(o.b)("em",{parentName:"p"},"Web Service")," and a ",Object(o.b)("em",{parentName:"p"},"Worker")," components."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"# sample.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend\n      type: webservice\n      properties:\n        image: nginx\n    - name: backend\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - '1000'\n")),Object(o.b)("h2",{id:"step-3-attach-traits"},"Step 3: Attach Traits"),Object(o.b)("p",null,"Traits are platform provided features that could ",Object(o.b)("em",{parentName:"p"},"overlay")," a given component with extra operational behaviors."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get trait -n vela-system\nNAME                                       APPLIES-TO            DESCRIPTION                                     \ncpuscaler                                  [webservice worker]   configure k8s HPA with CPU metrics for Deployment\ningress                                    [webservice worker]   Configures K8s ingress and service to enable web traffic for your service. Please use route trait in cap center for advanced usage.\nscaler                                     [webservice worker]   Configures replicas for your service.\nsidecar                                    [webservice worker]   inject a sidecar container into your app\n")),Object(o.b)("p",null,"Let's check the specification of ",Object(o.b)("inlineCode",{parentName:"p"},"sidecar")," trait."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl vela show sidecar\n# Properties\n+---------+-----------------------------------------+----------+----------+---------+\n|  NAME   |               DESCRIPTION               |   TYPE   | REQUIRED | DEFAULT |\n+---------+-----------------------------------------+----------+----------+---------+\n| name    | Specify the name of sidecar container   | string   | true     |         |\n| image   | Specify the image of sidecar container  | string   | true     |         |\n| command | Specify the commands run in the sidecar | []string | false    |         |\n+---------+-----------------------------------------+----------+----------+---------+\n")),Object(o.b)("p",null,"Note that traits are designed to be ",Object(o.b)("em",{parentName:"p"},"overlays"),"."),Object(o.b)("p",null,"This means for ",Object(o.b)("inlineCode",{parentName:"p"},"sidecar")," trait, your ",Object(o.b)("inlineCode",{parentName:"p"},"frontend")," component doesn't need to have a sidecar template or bring a webhook to enable sidecar injection. Instead, KubeVela is able to patch a sidecar to its workload instance after it is generated by the component (no matter it's a Helm chart or CUE module) but before it is applied to runtime cluster."),Object(o.b)("p",null,'Similarly, the system will assign a HPA instance based on the properties you set and "link" it to the target workload instance, the component itself is untouched.'),Object(o.b)("p",null,"Now let's attach ",Object(o.b)("inlineCode",{parentName:"p"},"sidecar")," and ",Object(o.b)("inlineCode",{parentName:"p"},"cpuscaler")," traits to the ",Object(o.b)("inlineCode",{parentName:"p"},"frontend")," component. "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'# sample.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend              # This is the component I want to deploy\n      type: webservice\n      properties:\n        image: nginx\n      traits:\n        - type: cpuscaler         # Assign a HPA to scale the component by CPU usage\n          properties:\n            min: 1\n            max: 10\n            cpuPercent: 60\n        - type: sidecar           # Inject a fluentd sidecar before applying the component to runtime cluster\n          properties:\n            name: "sidecar-test"\n            image: "fluentd"\n    - name: backend\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - \'1000\'\n')),Object(o.b)("h2",{id:"step-4-deploy-the-application"},"Step 4: Deploy the Application"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f https://raw.githubusercontent.com/oam-dev/kubevela/master/docs/examples/enduser/sample.yaml\napplication.core.oam.dev/website created\n")),Object(o.b)("p",null,"You'll get the application becomes ",Object(o.b)("inlineCode",{parentName:"p"},"running"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get application\nNAME        COMPONENT   TYPE         PHASE     HEALTHY   STATUS   AGE\nwebsite     frontend    webservice   running   true               4m54s\n")),Object(o.b)("p",null,"Check the details of the application."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},'$ kubectl get app website -o yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  generation: 1\n  name: website\n  namespace: default\nspec:\n  components:\n  - name: frontend\n    properties:\n      image: nginx\n    traits:\n    - properties:\n        cpuPercent: 60\n        max: 10\n        min: 1\n      type: cpuscaler\n    - properties:\n        image: fluentd\n        name: sidecar-test\n      type: sidecar\n    type: webservice\n  - name: backend\n    properties:\n      cmd:\n      - sleep\n      - "1000"\n      image: busybox\n    type: worker\nstatus:\n  ...\n  latestRevision:\n    name: website-v1\n    revision: 1\n    revisionHash: e9e062e2cddfe5fb\n  services:\n  - healthy: true\n    name: frontend\n    traits:\n    - healthy: true\n      type: cpuscaler\n    - healthy: true\n      type: sidecar\n  - healthy: true\n    name: backend\n  status: running\n')),Object(o.b)("p",null,"Specifically:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"status.latestRevision")," declares current revision of this deployment."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"status.services")," declares the component created by this deployment and the healthy state."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"status.status")," declares the global state of this deployment. ")),Object(o.b)("h3",{id:"list-revisions"},"List Revisions"),Object(o.b)("p",null,"When updating an application entity, KubeVela will create a new revision for this change."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get apprev -l app.oam.dev/name=website\nNAME           AGE\nwebsite-v1     35m\n")),Object(o.b)("p",null,"Furthermore, the system will decide how to/whether to rollout the application based on the attached ",Object(o.b)("a",{parentName:"p",href:"scopes/rollout-plan"},"rollout plan"),"."),Object(o.b)("h3",{id:"verify"},"Verify"),Object(o.b)("details",null,Object(o.b)("p",null,"On the runtime cluster, you could see a Kubernetes Deployment named ",Object(o.b)("inlineCode",{parentName:"p"},"frontend")," is running, with port exposed, and with a container ",Object(o.b)("inlineCode",{parentName:"p"},"fluentd")," injected."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deploy frontend\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nfrontend   1/1     1            1           97s\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deploy frontend -o yaml\n...\n    spec:\n      containers:\n      - image: nginx\n        imagePullPolicy: Always\n        name: frontend\n        ports:\n        - containerPort: 80\n          protocol: TCP\n      - image: fluentd\n        imagePullPolicy: Always\n        name: sidecar-test\n...\n")),Object(o.b)("p",null,"Another Deployment is also running named ",Object(o.b)("inlineCode",{parentName:"p"},"backend"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deploy backend\nNAME      READY   UP-TO-DATE   AVAILABLE   AGE\nbackend   1/1     1            1           111s\n")),Object(o.b)("p",null,"An HPA was also created by the ",Object(o.b)("inlineCode",{parentName:"p"},"cpuscaler")," trait. "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get HorizontalPodAutoscaler frontend\nNAME       REFERENCE             TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\nfrontend   Deployment/frontend   <unknown>/50%   1         10        1          101m\n"))))}p.isMDXComponent=!0},341:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return t?r.a.createElement(m,l(l({ref:n},s),{},{components:t})):r.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);