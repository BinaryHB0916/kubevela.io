(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[4646],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),u=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||s[m]||l;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var u=2;u<l;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3300:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return p},toc:function(){return i},default:function(){return c}});var o=n(2122),r=n(9756),l=(n(7294),n(3905)),a={title:"Application Rollout"},p={unversionedId:"end-user/rollout-app",id:"version-v1.0/end-user/rollout-app",isDocsHomePage:!1,title:"Application Rollout",description:"In this documentation, we will show how to use the rollout plan within application to do progressive rollout.",source:"@site/versioned_docs/version-v1.0/end-user/rollout-app.md",sourceDirName:"end-user",slug:"/end-user/rollout-app",permalink:"/docs/end-user/rollout-app",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/end-user/rollout-app.md",version:"v1.0",lastUpdatedBy:"Jianbo Sun",lastUpdatedAt:1619772878,formattedLastUpdatedAt:"4/30/2021",frontMatter:{title:"Application Rollout"},sidebar:"version-v1.0/docs",previous:{title:"Define Application Health Probe",permalink:"/docs/end-user/health"},next:{title:"Resource Model",permalink:"/docs/platform-engineers/overview"}},i=[{value:"Overview",id:"overview",children:[]},{value:"User Workflow",id:"user-workflow",children:[]},{value:"Using AppRollout to adopt Application with rolloutPlan",id:"using-approllout-to-adopt-application-with-rolloutplan",children:[]}],u={toc:i};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In this documentation, we will show how to use the rollout plan within application to do progressive rollout."),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"By default, when we update the spec of Application, KubeVela will update workload directly which relies on the underlying workload to provide availability."),(0,l.kt)("p",null,"KubeVela provides a unified progressive rollout mechanism, you can specify the ",(0,l.kt)("inlineCode",{parentName:"p"},"spec.rolloutPlan")," in application to do so."),(0,l.kt)("h2",{id:"user-workflow"},"User Workflow"),(0,l.kt)("p",null,"Here is the end to end user experience based on Deployment"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Deploy application to the cluster"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\nname: test-rolling\nspec:\ncomponents:\n  - name: metrics-provider\n    type: worker\n    properties:\n      cmd:\n        - ./podinfo\n        - stress-cpu=1.0\n      image: stefanprodan/podinfo:4.0.6\n      port: 8080\nrolloutPlan:\n  rolloutStrategy: "IncreaseFirst"\n  rolloutBatches:\n    - replicas: 50%\n    - replicas: 50%\n  targetSize: 6\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"User can  modify the application container command and apply"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\nname: test-rolling\nspec:\ncomponents:\n  - name: metrics-provider\n    type: worker\n    properties:\n      cmd:\n        - ./podinfo\n        - stress-cpu=2.0\n      image: stefanprodan/podinfo:4.0.6\n      port: 8080\nrolloutPlan:\n  rolloutStrategy: "IncreaseFirst"\n  rolloutBatches:\n    - replicas: 50%\n    - replicas: 50%\n  targetSize: 6\n')))),(0,l.kt)("p",null,"User can check the status of the Application and see the rollout completes, and the\nApplication's ",(0,l.kt)("inlineCode",{parentName:"p"},"status.rollout.rollingState")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"rolloutSucceed")),(0,l.kt)("h2",{id:"using-approllout-to-adopt-application-with-rolloutplan"},"Using AppRollout to adopt Application with rolloutPlan"),(0,l.kt)("p",null,"Sometimes, we want to use ",(0,l.kt)("a",{parentName:"p",href:"../rollout/rollout"},"AppRollout")," to adopt the Application Rollout, so we can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"AppRollout")," to specify more specific revision. The ",(0,l.kt)("inlineCode",{parentName:"p"},"AppRollout")," can both rollout or revert the version of application."),(0,l.kt)("p",null,"If you want to let ",(0,l.kt)("inlineCode",{parentName:"p"},"AppRollout")," adopt the Application with ",(0,l.kt)("inlineCode",{parentName:"p"},"rolloutPlan"),", please add the annotations in application to tell ",(0,l.kt)("inlineCode",{parentName:"p"},"AppRollout")," to adopt rollout, and clean the strategy in ",(0,l.kt)("inlineCode",{parentName:"p"},"spec.rolloutPlan")," to avoid conflicts."),(0,l.kt)("p",null,"eg. to let AppRollout adopt the application above, you should update the application like below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: test-rolling\n  annotations:\n    "app.oam.dev/rolling-components": "metrics-provider"\n    "app.oam.dev/rollout-template": "true"\nspec:\n  components:\n    - name: metrics-provider\n      type: worker\n      properties:\n        cmd:\n          - ./podinfo\n          - stress-cpu=2.0\n        image: stefanprodan/podinfo:4.0.6\n        port: 8080\n')),(0,l.kt)("p",null,"Please refer to ",(0,l.kt)("a",{parentName:"p",href:"../rollout/rollout"},"AppRollout")," to learn more details."))}c.isMDXComponent=!0}}]);