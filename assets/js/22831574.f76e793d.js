(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{201:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),c=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return t?o.a.createElement(b,i(i({ref:n},s),{},{components:t})):o.a.createElement(b,i({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},280:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/approllout-status-transition-78db00cbc539d19e6c5d3feeead31b16.jpg"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return c}));var a=t(3),o=t(7),r=(t(0),t(201)),l={title:"Progressive Rollout"},i={unversionedId:"rollout/rollout",id:"rollout/rollout",isDocsHomePage:!1,title:"Progressive Rollout",description:'Rollout or Upgrade is one of the most essential "day 2" operation on any application',source:"@site/docs/rollout/rollout.md",slug:"/rollout/rollout",permalink:"/docs/rollout/rollout",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/rollout/rollout.md",version:"current",lastUpdatedBy:"kubevela-bot",lastUpdatedAt:1617191825,formattedLastUpdatedAt:"3/31/2021",sidebar:"docs",previous:{title:"Application CRD",permalink:"/docs/application"},next:{title:"Multi-Version Multi-Cluster Application Deployment",permalink:"/docs/rollout/appdeploy"}},p=[{value:"Overview",id:"overview",children:[{value:"Design Principles and Goals",id:"design-principles-and-goals",children:[]}]},{value:"AppRollout Example",id:"approllout-example",children:[]},{value:"User Experience Workflow",id:"user-experience-workflow",children:[]},{value:"State Transition",id:"state-transition",children:[]},{value:"Roadmap",id:"roadmap",children:[]}],s={toc:p};function c(e){var n=e.components,l=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,l,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Rollout")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Upgrade"),' is one of the most essential "day 2" operation on any application\n. KubeVela, as an application centric platform, definitely needs to provide a customized solution\nto alleviate the burden on the application operators.'),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"There are several attempts at solving this problem in the cloud native community. However, none\nof them provide a true rolling style upgrade. For example, flagger supports Blue/Green, Canary\nand A/B testing. Therefore, we decide to add support for batch based rolling upgrade as\nour first style to support in KubeVela."),Object(r.b)("h3",{id:"design-principles-and-goals"},"Design Principles and Goals"),Object(r.b)("p",null,"We design KubeVela rollout solutions with the following principles in mind"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"First, we want all flavors of rollout controllers share the same core rollout\nrelated logic. The trait and application related logic can be easily encapsulated into its own\npackage."),Object(r.b)("li",{parentName:"ul"},"Second, the core rollout related logic is easily extensible to support different type of\nworkloads, i.e. Deployment, Cloneset, Statefulset, Daemonset or even customized workloads."),Object(r.b)("li",{parentName:"ul"},"Thirdly, the core rollout related logic has a well documented state machine that\ndoes state transition explicitly."),Object(r.b)("li",{parentName:"ul"},"Finally, the controllers can support all the rollout/upgrade needs of an application running\nin a production environment including Blue/Green, Canary and A/B testing.")),Object(r.b)("h2",{id:"approllout-example"},"AppRollout Example"),Object(r.b)("p",null,"Here is a simple ",Object(r.b)("inlineCode",{parentName:"p"},"AppRollout")," that upgrade an application from v1 to v2 in three batches. The\nfirst batch contains only 1 pod while the rest of the batches split the rest."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: AppRollout\nmetadata:\n  name: rolling-example\nspec:\n  sourceAppRevisionName: test-rolling-v1\n  targetAppRevisionName: test-rolling-v2\n  componentList:\n    - metrics-provider\n  rolloutPlan:\n    rolloutStrategy: "IncreaseFirst"\n    rolloutBatches:\n      - replicas: 1\n      - replicas: 50%\n      - replicas: 50%\n    batchPartition: 1\n')),Object(r.b)("h2",{id:"user-experience-workflow"},"User Experience Workflow"),Object(r.b)("p",null,"Here is the end to end user experience"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Install Open Kurise and CloneSet based workloadDefinition")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"helm install kruise https://github.com/openkruise/kruise/releases/download/v0.7.0/kruise-chart.tgz\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: ComponentDefinition\nmetadata:\n  name: clonesetservice\n  namespace: vela-system\n  annotations:\n    definition.oam.dev/description: "Describes long-running, scalable, containerized services that have a stable network endpoint to receive external network traffic from customers.\n    If workload type is skipped for any service defined in Appfile, it will be defaulted to `webservice` type."\nspec:\n  workload:\n    definition:\n      apiVersion: apps.kruise.io/v1alpha1\n      kind: CloneSet\n  schematic:\n    cue:\n      template: |\n        output: {\n            apiVersion: "apps.kruise.io/v1alpha1"\n            kind:       "CloneSet"\n            metadata: labels: {\n              "app.oam.dev/component": context.name\n            }\n            spec: {\n                if parameter["replicas"] != _|_ {\n                    replicas: parameter.replicas\n                }\n                selector: matchLabels: {\n                    "app.oam.dev/component": context.name\n                }\n\n                template: {\n                    metadata: labels: {\n                      "app.oam.dev/component": context.name\n                    }\n\n                    spec: {\n                        containers: [{\n                          name:  context.name\n                          image: parameter.image\n\n                          if parameter["cmd"] != _|_ {\n                              command: parameter.cmd\n                          }\n\n                          if parameter["env"] != _|_ {\n                              env: parameter.env\n                          }\n\n                          if context["config"] != _|_ {\n                              env: context.config\n                          }\n\n                          ports: [{\n                              containerPort: parameter.port\n                          }]\n\n                          if parameter["cpu"] != _|_ {\n                              resources: {\n                                  limits:\n                                      cpu: parameter.cpu\n                                  requests:\n                                      cpu: parameter.cpu\n                              }\n                          }\n                      }]\n                    }\n                }\n                if parameter["updateStrategyType"] != _|_ {\n                    updateStrategy: {\n                      type: parameter.updateStrategyType\n                    }\n                }\n            }\n        }\n        parameter: {\n            // +usage=Which image would you like to use for your service\n            // +short=i\n            image: string\n\n            // +usage=Commands to run in the container\n            cmd?: [...string]\n\n            // +usage=Which port do you want customer traffic sent to\n            // +short=p\n            port: *80 | int\n            // +usage=Define arguments by using environment variables\n            env?: [...{\n                // +usage=Environment variable name\n                name: string\n                // +usage=The value of the environment variable\n                value?: string\n                // +usage=Specifies a source the value of this var should come from\n                valueFrom?: {\n                    // +usage=Selects a key of a secret in the pod\'s namespace\n                    secretKeyRef: {\n                        // +usage=The name of the secret in the pod\'s namespace to select from\n                        name: string\n                        // +usage=The key of the secret to select from. Must be a valid secret key\n                        key: string\n                    }\n                }\n            }]\n            // +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)\n            cpu?: string\n            // +usage=Cloneset updateStrategy, candidates are `ReCreate`/`InPlaceIfPossible`/`InPlaceOnly`\n            updateStrategyType?: string\n            // +usage=Number of pods in the cloneset\n            replicas?: int\n        }\n')),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Apply an application to the cluster")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: test-rolling\n  annotations:\n    "app.oam.dev/rolling-components": "metrics-provider"\n    "app.oam.dev/rollout-template": "true"\nspec:\n  components:\n    - name: metrics-provider\n      type: clonesetservice\n      properties:\n        cmd:\n          - ./podinfo\n          - stress-cpu=1\n        image: stefanprodan/podinfo:4.0.6\n        port: 8080\n        updateStrategyType: InPlaceIfPossible\n        replicas: 5\n')),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"Apply the following rollout to upgrade the application to v1")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: AppRollout\nmetadata:\n  name: rolling-example\nspec:\n  # application (revision) reference\n  targetAppRevisionName: test-rolling-v1\n  componentList:\n    - metrics-provider\n  rolloutPlan:\n    rolloutStrategy: "IncreaseFirst"\n    rolloutBatches:\n      - replicas: 10%\n      - replicas: 40%\n      - replicas: 50%\n')),Object(r.b)("p",null,"Use can check the status of the ApplicationRollout and wait for the rollout to complete."),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"User can continue to modify the application image tag and apply")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: test-rolling\n  annotations:\n    "app.oam.dev/rolling-components": "metrics-provider"\n    "app.oam.dev/rollout-template": "true"\nspec:\n  components:\n    - name: metrics-provider\n      type: clonesetservice\n      properties:\n        cmd:\n          - ./podinfo\n          - stress-cpu=1\n        image: stefanprodan/podinfo:5.0.2\n        port: 8080\n        updateStrategyType: InPlaceIfPossible\n        replicas: 5\n')),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"Apply the application rollout that upgrade the application from v1 to v2")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.oam.dev/v1beta1\nkind: AppRollout\nmetadata:\n  name: rolling-example\nspec:\n  # application (revision) reference\n  sourceAppRevisionName: test-rolling-v1\n  targetAppRevisionName: test-rolling-v2\n  componentList:\n    - metrics-provider\n  rolloutPlan:\n    rolloutStrategy: "IncreaseFirst"\n    rolloutBatches:\n      - replicas: 1\n      - replicas: 2\n      - replicas: 2\n')),Object(r.b)("p",null,'User can check the status of the ApplicationRollout and see the rollout completes, and the\nApplicationRollout\'s "Rolling State" becomes ',Object(r.b)("inlineCode",{parentName:"p"},"rolloutSucceed")),Object(r.b)("h2",{id:"state-transition"},"State Transition"),Object(r.b)("p",null,"Here is the high level state transition graph"),Object(r.b)("p",null,Object(r.b)("img",{src:t(280).default})),Object(r.b)("h2",{id:"roadmap"},"Roadmap"),Object(r.b)("p",null,"Our recent roadmap for progressive rollout is ",Object(r.b)("a",{parentName:"p",href:"./roadmap"},"here"),"."))}c.isMDXComponent=!0}}]);