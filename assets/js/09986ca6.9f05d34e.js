(self.webpackChunkkubevela_io=self.webpackChunkkubevela_io||[]).push([[6431],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(f,i(i({ref:n},s),{},{components:t})):a.createElement(f,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},74509:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return s}});var a=t(22122),o=t(19756),r=(t(67294),t(3905)),i={title:"Deploy Application"},l={unversionedId:"application",id:"version-v1.0/application",isDocsHomePage:!1,title:"Deploy Application",description:"This documentation will walk through a full application deployment workflow on KubeVela platform.",source:"@site/versioned_docs/version-v1.0/application.md",sourceDirName:".",slug:"/application",permalink:"/docs/application",editUrl:"https://github.com/oam-dev/kubevela/edit/master/docs/en/application.md",version:"v1.0",lastUpdatedBy:"yangsoon",lastUpdatedAt:1621315429,formattedLastUpdatedAt:"5/18/2021",frontMatter:{title:"Deploy Application"},sidebar:"defaultSidebar",previous:{title:"Advanced Topics for Installation",permalink:"/docs/advanced-install"},next:{title:"vela",permalink:"/docs/cli/vela"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Step 1: Check Capabilities in the Platform",id:"step-1-check-capabilities-in-the-platform",children:[]},{value:"Step 2: Design and Deploy Application",id:"step-2-design-and-deploy-application",children:[{value:"Deploy the Application",id:"deploy-the-application",children:[]},{value:"Verify the Deployment",id:"verify-the-deployment",children:[]}]}],c={toc:p};function s(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This documentation will walk through a full application deployment workflow on KubeVela platform."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"KubeVela is a fully self-service platform. All capabilities an application deployment needs are maintained as building block modules in this platform. Specifically:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Components - deployable/provisionable entities that composed your application deployment",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. a Kubernetes workload, a MySQL database, or a AWS OSS bucket"))),(0,r.kt)("li",{parentName:"ul"},"Traits - attachable operational features per your needs",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. autoscaling rules, rollout strategies, ingress rules, sidecars, security policies etc")))),(0,r.kt)("h2",{id:"step-1-check-capabilities-in-the-platform"},"Step 1: Check Capabilities in the Platform"),(0,r.kt)("p",null,"As user of this platform, you could check available components you can deploy, and available traits you can attach."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl get componentdefinitions -n vela-system\nNAME         WORKLOAD-KIND   DESCRIPTION                                                                                                                                                AGE\ntask         Job             Describes jobs that run code or a script to completion.                                                                                                    5h52m\nwebservice   Deployment      Describes long-running, scalable, containerized services that have a stable network endpoint to receive external network traffic from customers.           5h52m\nworker       Deployment      Describes long-running, scalable, containerized services that running at backend. They do NOT have network endpoint to receive external network traffic.   5h52m\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'$ kubectl get traitdefinitions -n vela-system\nNAME      APPLIES-TO                DESCRIPTION                                                                                                                           AGE\ningress   ["webservice","worker"]   Configures K8s ingress and service to enable web traffic for your service. Please use route trait in cap center for advanced usage.   6h8m\ncpuscaler ["webservice","worker"]   Configure k8s HPA with CPU metrics for Deployment                                                                                          6h8m\n')),(0,r.kt)("p",null,"To show the specification for given capability, you could use ",(0,r.kt)("inlineCode",{parentName:"p"},"vela")," CLI. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"vela show webservice")," will return full schema of ",(0,r.kt)("em",{parentName:"p"},"Web Service")," component and ",(0,r.kt)("inlineCode",{parentName:"p"},"vela show webservice --web")," will open its capability reference documentation in your browser."),(0,r.kt)("h2",{id:"step-2-design-and-deploy-application"},"Step 2: Design and Deploy Application"),(0,r.kt)("p",null,"In KubeVela, ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," is the main API to define your application deployment based on available capabilities. Every ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," could contain multiple components, each of them can be attached with a number of traits per needs. "),(0,r.kt)("p",null,"Now let's define an application composed by ",(0,r.kt)("em",{parentName:"p"},"Web Service")," and ",(0,r.kt)("em",{parentName:"p"},"Worker")," components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# sample.yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: website\nspec:\n  components:\n    - name: frontend\n      type: webservice\n      properties:\n        image: nginx\n      traits:\n        - type: cpuscaler\n          properties:\n            min: 1\n            max: 10\n            cpuPercent: 60\n        - type: sidecar\n          properties:\n            name: "sidecar-test"\n            image: "fluentd"\n    - name: backend\n      type: worker\n      properties:\n        image: busybox\n        cmd:\n          - sleep\n          - \'1000\'\n')),(0,r.kt)("p",null,"In this sample, we also attached ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecar")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cpuscaler")," traits to the ",(0,r.kt)("inlineCode",{parentName:"p"},"frontend")," component.\nSo after deployed, the ",(0,r.kt)("inlineCode",{parentName:"p"},"frontend")," component instance (a Kubernetes Deployment workload) will be automatically injected\nwith a ",(0,r.kt)("inlineCode",{parentName:"p"},"fluentd")," sidecar and automatically scale from 1-10 replicas based on CPU usage."),(0,r.kt)("h3",{id:"deploy-the-application"},"Deploy the Application"),(0,r.kt)("p",null,"Apply application YAML to Kubernetes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f https://raw.githubusercontent.com/oam-dev/kubevela/master/docs/examples/enduser/sample.yaml\napplication.core.oam.dev/website created\n")),(0,r.kt)("p",null,"You'll get the application becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"running"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get application website -o yaml\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n name: website\n....\nstatus:\n  components:\n  - apiVersion: core.oam.dev/v1alpha2\n    kind: Component\n    name: backend\n  - apiVersion: core.oam.dev/v1alpha2\n    kind: Component\n    name: frontend\n....\n  status: running\n\n")),(0,r.kt)("h3",{id:"verify-the-deployment"},"Verify the Deployment"),(0,r.kt)("p",null,"You could see a Deployment named ",(0,r.kt)("inlineCode",{parentName:"p"},"frontend")," is running, with port exposed, and with a container ",(0,r.kt)("inlineCode",{parentName:"p"},"fluentd")," injected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deploy frontend\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nfrontend   1/1     1            1           97s\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deploy frontend -o yaml\n...\n    spec:\n      containers:\n      - image: nginx\n        imagePullPolicy: Always\n        name: frontend\n        ports:\n        - containerPort: 80\n          protocol: TCP\n      - image: fluentd\n        imagePullPolicy: Always\n        name: sidecar-test\n...\n")),(0,r.kt)("p",null,"Another Deployment is also running named ",(0,r.kt)("inlineCode",{parentName:"p"},"backend"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deploy backend\nNAME      READY   UP-TO-DATE   AVAILABLE   AGE\nbackend   1/1     1            1           111s\n")),(0,r.kt)("p",null,"An HPA was also created by the ",(0,r.kt)("inlineCode",{parentName:"p"},"cpuscaler")," trait. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get HorizontalPodAutoscaler frontend\nNAME       REFERENCE             TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\nfrontend   Deployment/frontend   <unknown>/50%   1         10        1          101m\n")))}s.isMDXComponent=!0}}]);